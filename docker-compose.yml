services:
  mongo:
    image: mongo:7.0.5
    container_name: mongo
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: product-service
    volumes:
      - ./docker/mongodb/data:/data/db
    networks:
      - eshop-network
  mysql:
    image: mysql:8.3.0
    container_name: mysql
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: mysql
    volumes:
      - ./infrastructure/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./docker/mysql/data:/var/lib/mysql
    networks:
      - eshop-network
  product-service:
    image: product-service
    build:
      context: ./product
      dockerfile: Dockerfile
    environment:
      SPRING_DATA_MONGODB_HOST: mongo
      MONGO_USERNAME: root
      MONGO_PASSWORD: password
      MONGO_PORT: 27017
    ports:
      - "8080:8080"
    depends_on:
      - mongo
    networks:
      - eshop-network
  inventory-service:
    image: inventory-service
    build:
      context: ./inventory
      dockerfile: Dockerfile
    environment:
      MYSQL_HOST: mysql
      MYSQL_USER: root
      MYSQL_PASSWORD: mysql
      MYSQL_PORT: 3306 
    ports:
      - "8082:8082"
    depends_on:
      - mysql
    networks:
      - eshop-network  
  order-service:
    image: order-service
    build:
      context: ./order
      dockerfile: Dockerfile
    environment:
      MYSQL_HOST: mysql
      MYSQL_USER: root
      MYSQL_PASSWORD: mysql
      MYSQL_PORT: 3306
      INVENTORY_URL: http://inventory-service:8082
    ports:
      - "8081:8081"
    depends_on:
      - mysql
    networks:
      - eshop-network
  api-gateway-service:
    image: api-gateway-service
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    environment:
      PRODUCT_URL: http://product-service:8080
      ORDER_URL: http://order-service:8081
      INVENTORY_URL: http://inventory-service:8082
    ports:
      - "9000:9000"
    networks:
      - eshop-network
  keycloak-mysql:
    container_name: keycloak-mysql
    image: mysql:8
    ports:
      - "3307:3306"
    volumes:
      - ./docker/mysql_keycloak/data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: keycloak
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: password
    networks:
      - eshop-network
  keycloak:
    container_name: keycloak    
    image: quay.io/keycloak/keycloak:24.0.1
    command: [ "start-dev", "--import-realm" ]
    environment:
      KC_DB: mysql
      KC_DB_URL: jdbc:mysql://keycloak-mysql:3306/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8181:8080"
    volumes:
      - ./docker/keycloak/realms/:/opt/keycloak/data/import/
    depends_on:
      - keycloak-mysql
    networks:
      - eshop-network
networks:
  eshop-network:
    driver: bridge